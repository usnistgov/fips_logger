<?php
class FIPSLoggerFieldTestCase extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'FIPS Logger Field Unit Tests',
      'description' => 'Test that fips_logger field functions are logging and reporting properly.',
      'group' => 'FIPS Logger'
    );

  }

  /**
   * I set up the class to be used for testing.
   */
  function setUp() {
    // inject dependencies
    parent::setUp('fips_logger', 'syslog');
  }

  // FIELD Update
  public function testFIPSLoggerFieldUpdate() {
    $field = array(
      'field_name' => 'FIPS LOGGER TEST DATA'
    );
    $result = fips_logger_field_update_field( $field );
    $message = 'Field UPDATE Field. I should return TRUE.';
    $this->assertTrue($result, $message);
  }
  public function testFIPSLoggerFieldUpdateFailBadArguments() {
    $field = array(
      'field_is_foo' => ''
    );
    $result = fips_logger_field_update_field( $field );
    $message = 'Field UPDATE Field. I should return FALSE. Bad arguments passed.';
    $this->assertFalse($result, $message);
  }
  public function testFIPSLoggerFieldUpdateFailNoArguments() {
    $result = fips_logger_field_update_field();
    $message = 'Field UPDATE Field FAIL. I should return FALSE. No arguments passed.';
    $this->assertFalse($result, $message);
  }

  //FIELD Delete
  public function testFIPSLoggerFieldDelete() {
    $field = array(
      'field_name' => 'FIPS LOGGER TEST DATA'
    );
    $result = fips_logger_field_delete_field( $field );
    $message = 'Field DELETE Field. I should return TRUE.';
    $this->assertTrue($result, $message);
  }
  public function testFIPSLoggerFieldDeleteFailBadArguments() {
    $argument = 'stringAndShouldFail!';
    $result = fips_logger_field_delete_field($argument);
    $message = 'Field DELETE Field FAIL. I should return FALSE. Bad arguments passed.';
    $this->assertFalse($result, $message);
  }
  public function testFIPSLoggerFieldDeleteFailNoArguments() {
    $result = fips_logger_field_delete_field();
    $message = 'Field DELETE Field FAIL. I should return FALSE. No arguments passed.';
    $this->assertFalse($result, $message);
  }

  //FIELD Create
  public function testFIPSLoggerFieldCreate() {
    $field = array(
      'field_name' => 'FIPS LOGGER TEST DATA'
    );
    $result = fips_logger_field_create_field( $field );
    $message = 'Field CREATE Field. I should return TRUE.';
    $this->assertTrue($result, $message);
  }
  public function testFIPSLoggerFieldCreateFailBadArguments() {
    $argument = true;
    $result = fips_logger_field_create_field($argument);
    $message = 'Field CREATE Field FAIL. I should return FALSE. Bad arguments passed.';
    $this->assertFalse($result, $message);
  }
  public function testFIPSLoggerFieldCreateFailNoArguments() {
    $result = fips_logger_field_create_field();
    $message = 'Field CREATE Field FAIL. I should return FALSE. No arguments passed.';
    $this->assertFalse($result, $message);
  }
}
